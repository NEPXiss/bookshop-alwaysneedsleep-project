@startuml
class person.AdminAccount {
+ <<Create>> AdminAccount()
+ String getAccountType()
+ boolean deleteAccount()
}
class person.StaffAccount {
- int staffNumber
+ <<Create>> StaffAccount(String,String,int)
+ void addAccountToDataBase()
+ String getDisplayUsername()
+ String getAccountType()
+ int getStaffNumber()
}
interface usage.Registrable {
~ void addAccountToDataBase()
~ String getDisplayUsername()
}
enum usage.DeliveryStatus {
+  AWAITING
+  DELIVERED
+  CONFIRMED
}
class item.Book {
+ <<Create>> Book(String,String,ItemGenre,double,int,int,String,String,String)
+ String getFullDescription()
}
class store.Order {
- String username
- HashMap<StoreItem,Integer> orderItems
- double totalCost
- String telNumber
- String deliveryAddress
- DeliveryStatus deliveryStatus
+ <<Create>> Order(String,HashMap<StoreItem,Integer>,double,String,String)
+ DeliveryStatus getDeliveryStatus()
+ void setDeliveryStatus(DeliveryStatus)
+ String getTelNumber()
+ String getUsername()
+ void setUsername(String)
+ HashMap<StoreItem,Integer> getOrderItems()
+ double getTotalCost()
+ String getDeliveryAddress()
}
enum usage.ItemGenre {
+  FICTION
+  HISTORY
+  PHILOSOPHY
+  PSYCHOLOGY
+  EDUCATION
+  SCIENCE
}
interface usage.Orderable {
~ boolean isOrderable()
~ String getFullDescription()
}
class store.ProgramController {
- Account enteredAccount
- {static} ProgramController instance
+ <<Create>> ProgramController()
+ Account getEnteredAccount()
+ void setEnteredAccount(Account)
+ {static} ProgramController getInstance()
}
class store.StoreStorage {
- HashMap<StoreItem,String> shelfMap
- ArrayList<StoreItem> newArrivalList
- ArrayList<StoreItem> recommendedItemsList
- {static} StoreStorage storeStorage
- ArrayList<Order> orderArrayList
+ <<Create>> StoreStorage()
+ {static} StoreStorage getStorage()
+ ArrayList<Order> getOrderArrayList()
+ HashMap<StoreItem,String> getShelfMap()
+ ArrayList<StoreItem> getNewArrivalList()
+ ArrayList<StoreItem> getRecommendedItemsList()
}
class store.StoreDataBase {
- HashMap<String,Account> accountMap
- {static} StoreDataBase storeDataBase
+ <<Create>> StoreDataBase()
+ HashMap<String,Account> getAccountMap()
+ {static} StoreDataBase getStoreAccountDataBase()
}
abstract class base.StoreItem {
- int quantity
- String itemLocation
- String title
- Image image
- ItemGenre itemGenre
- double price
- String authorBrand
- String imagePath
- int rating
- String description
+ <<Create>> StoreItem(String,String,ItemGenre,double,int,int,String,String,String)
+ void removeItself()
+ boolean isOrderable()
+ void setImageByPath(String)
+ int getQuantity()
+ void setPrice(double)
+ String getItemLocation()
+ void setQuantity(int)
+ void setItemLocation(String)
+ String getTitle()
+ void setTitle(String)
+ ItemGenre getItemGenre()
+ double getPrice()
+ String getAuthorBrand()
+ void setAuthorBrand(String)
+ int getRating()
+ Image getImage()
+ String getImagePath()
+ void setImage(Image)
+ void setItemGenre(ItemGenre)
+ void setRating(int)
+ String getDescription()
+ void setDescription(String)
+ String getFullDescription()
}
class person.UserAccount {
- ArrayList<Order> orderList
- HashMap<StoreItem,Integer> cartMap
- ArrayList<StoreItem> wishList
+ <<Create>> UserAccount(String,String)
+ String getDisplayUsername()
+ String getAccountType()
+ ArrayList<Order> getOrderList()
+ HashMap<StoreItem,Integer> getCartMap()
+ ArrayList<StoreItem> getWishList()
+ void addAccountToDataBase()
}
abstract class base.Account {
- String username
- String password
+ <<Create>> Account(String,String)
+ String getUsername()
+ String getDisplayUsername()
+ void setUsername(String)
+ String getPassword()
+ void setPassword(String)
+ String getAccountType()
+ boolean deleteAccount()
}


base.Account <|-- person.AdminAccount
usage.Registrable <|.. person.StaffAccount
base.Account <|-- person.StaffAccount
base.StoreItem <|-- item.Book
usage.Orderable <|.. base.StoreItem
usage.Registrable <|.. person.UserAccount
base.Account <|-- person.UserAccount
@enduml